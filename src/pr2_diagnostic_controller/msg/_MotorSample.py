"""autogenerated by genpy from pr2_diagnostic_controller/MotorSample.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorSample(genpy.Message):
  _md5sum = "110215cb81632c4d19d5ac0bb5a4d053"
  _type = "pr2_diagnostic_controller/MotorSample"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 timestamp
bool enabled
float64 supply_voltage
float64 measured_motor_voltage
float64 programmed_pwm
float64 executed_current
float64 measured_current
float64 velocity
float64 encoder_position
uint64 encoder_error_count

"""
  __slots__ = ['timestamp','enabled','supply_voltage','measured_motor_voltage','programmed_pwm','executed_current','measured_current','velocity','encoder_position','encoder_error_count']
  _slot_types = ['float64','bool','float64','float64','float64','float64','float64','float64','float64','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,enabled,supply_voltage,measured_motor_voltage,programmed_pwm,executed_current,measured_current,velocity,encoder_position,encoder_error_count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorSample, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.enabled is None:
        self.enabled = False
      if self.supply_voltage is None:
        self.supply_voltage = 0.
      if self.measured_motor_voltage is None:
        self.measured_motor_voltage = 0.
      if self.programmed_pwm is None:
        self.programmed_pwm = 0.
      if self.executed_current is None:
        self.executed_current = 0.
      if self.measured_current is None:
        self.measured_current = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.encoder_position is None:
        self.encoder_position = 0.
      if self.encoder_error_count is None:
        self.encoder_error_count = 0
    else:
      self.timestamp = 0.
      self.enabled = False
      self.supply_voltage = 0.
      self.measured_motor_voltage = 0.
      self.programmed_pwm = 0.
      self.executed_current = 0.
      self.measured_current = 0.
      self.velocity = 0.
      self.encoder_position = 0.
      self.encoder_error_count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_dB7dQ.pack(_x.timestamp, _x.enabled, _x.supply_voltage, _x.measured_motor_voltage, _x.programmed_pwm, _x.executed_current, _x.measured_current, _x.velocity, _x.encoder_position, _x.encoder_error_count))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.timestamp, _x.enabled, _x.supply_voltage, _x.measured_motor_voltage, _x.programmed_pwm, _x.executed_current, _x.measured_current, _x.velocity, _x.encoder_position, _x.encoder_error_count,) = _struct_dB7dQ.unpack(str[start:end])
      self.enabled = bool(self.enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_dB7dQ.pack(_x.timestamp, _x.enabled, _x.supply_voltage, _x.measured_motor_voltage, _x.programmed_pwm, _x.executed_current, _x.measured_current, _x.velocity, _x.encoder_position, _x.encoder_error_count))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 73
      (_x.timestamp, _x.enabled, _x.supply_voltage, _x.measured_motor_voltage, _x.programmed_pwm, _x.executed_current, _x.measured_current, _x.velocity, _x.encoder_position, _x.encoder_error_count,) = _struct_dB7dQ.unpack(str[start:end])
      self.enabled = bool(self.enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_dB7dQ = struct.Struct("<dB7dQ")
