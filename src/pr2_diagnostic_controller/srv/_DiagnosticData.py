"""autogenerated by genpy from pr2_diagnostic_controller/DiagnosticDataRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DiagnosticDataRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "pr2_diagnostic_controller/DiagnosticDataRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DiagnosticDataRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from pr2_diagnostic_controller/DiagnosticDataResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pr2_diagnostic_controller.msg

class DiagnosticDataResponse(genpy.Message):
  _md5sum = "e5409cf279c13e58aa9063cc4e66c6d9"
  _type = "pr2_diagnostic_controller/DiagnosticDataResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """pr2_diagnostic_controller/MotorSample[] sample_buffer


================================================================================
MSG: pr2_diagnostic_controller/MotorSample
float64 timestamp
bool enabled
float64 supply_voltage
float64 measured_motor_voltage
float64 programmed_pwm
float64 executed_current
float64 measured_current
float64 velocity
float64 encoder_position
uint64 encoder_error_count

"""
  __slots__ = ['sample_buffer']
  _slot_types = ['pr2_diagnostic_controller/MotorSample[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sample_buffer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DiagnosticDataResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sample_buffer is None:
        self.sample_buffer = []
    else:
      self.sample_buffer = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.sample_buffer)
      buff.write(_struct_I.pack(length))
      for val1 in self.sample_buffer:
        _x = val1
        buff.write(_struct_dB7dQ.pack(_x.timestamp, _x.enabled, _x.supply_voltage, _x.measured_motor_voltage, _x.programmed_pwm, _x.executed_current, _x.measured_current, _x.velocity, _x.encoder_position, _x.encoder_error_count))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.sample_buffer is None:
        self.sample_buffer = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sample_buffer = []
      for i in range(0, length):
        val1 = pr2_diagnostic_controller.msg.MotorSample()
        _x = val1
        start = end
        end += 73
        (_x.timestamp, _x.enabled, _x.supply_voltage, _x.measured_motor_voltage, _x.programmed_pwm, _x.executed_current, _x.measured_current, _x.velocity, _x.encoder_position, _x.encoder_error_count,) = _struct_dB7dQ.unpack(str[start:end])
        val1.enabled = bool(val1.enabled)
        self.sample_buffer.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.sample_buffer)
      buff.write(_struct_I.pack(length))
      for val1 in self.sample_buffer:
        _x = val1
        buff.write(_struct_dB7dQ.pack(_x.timestamp, _x.enabled, _x.supply_voltage, _x.measured_motor_voltage, _x.programmed_pwm, _x.executed_current, _x.measured_current, _x.velocity, _x.encoder_position, _x.encoder_error_count))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.sample_buffer is None:
        self.sample_buffer = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sample_buffer = []
      for i in range(0, length):
        val1 = pr2_diagnostic_controller.msg.MotorSample()
        _x = val1
        start = end
        end += 73
        (_x.timestamp, _x.enabled, _x.supply_voltage, _x.measured_motor_voltage, _x.programmed_pwm, _x.executed_current, _x.measured_current, _x.velocity, _x.encoder_position, _x.encoder_error_count,) = _struct_dB7dQ.unpack(str[start:end])
        val1.enabled = bool(val1.enabled)
        self.sample_buffer.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_dB7dQ = struct.Struct("<dB7dQ")
class DiagnosticData(object):
  _type          = 'pr2_diagnostic_controller/DiagnosticData'
  _md5sum = 'e5409cf279c13e58aa9063cc4e66c6d9'
  _request_class  = DiagnosticDataRequest
  _response_class = DiagnosticDataResponse
